#!/usr/bin/perl


# OUTSTANDING TASKS
# -----------------
# if the external temperature/humidity probe does not exist, the returned values will be -1.  Detect this event, and remove the temperature humidity readings from perf_data and output_details



# CHANGE LOG
# ----------
# 2022/12/21	njeffrey	Script created to monitor IBM/Lenovo PDU 


# nagios script to query IBM / Lenovo intelligent PDU for health status and power consumptipon


# NOTES
# -----
#  WARNING: This script has only been tested on single-phase PDUs.  Three-phase PDUs will probably need to have each phase checked seperately!
#
#  This script should return one (and only one) line of ouput.  Multiple
#  lines of output are silently ignored by nagios.
#
#  The line of output will become the body of the alert message sent by nagios
#
#
#  This script queries a remote host via SNMP
#
#  You will need a section in the services.cfg
#  file on the nagios server that looks similar to the following.
#      # Define a service to check the IBM/Lenovo PDU
#      # Parameters are SNMP community name
#      define service {
#              use                             generic-service
#              hostgroup_name                  all_ibm_pdu
#              service_description             PDU health
#              check_command                   check_ibm_pdu!public
#              }
#
#
#  You will also need a command definition similar to the following in commands.cfg on the nagios server
#      # 'check_ibm_pdu' command definition
#      # parameters are -H hostname -C snmp_community
#      define command{
#              command_name    check_ibm_pdu
#              command_line    $USER1$/check_ibm_pdu -H $HOSTADDRESS$ -C $ARG1$
#              }
#
#

# Different IBM PDU may use slightly different OID values.  Here are a few:
#
# IBM-PDU-MIB::ibmPduVoltageWarning        1.3.6.1.4.1.2.6.223.0.1.1.7    0=voltageNormal, 1=voltageOutOfRange
# IBM-PDU-MIB::ibmPduState                 1.3.6.1.4.1.2.6.223.0.1.1.6    0=powerOff, 1=powerOn, 2=reboot, 3=delayedOn, 4=delayedOff
# IBM-PDU-MIB::ibmPduExtThermalLastReading 1.3.6.1.4.1.2.6.223.9.2.1.9    Most recent humidity reading for the external humidity sensor, as a percentage.  If no external humidity sensor is connected, a value of -1 should be returned
# IBM-PDU-MIB::ibmPduSoftwareVersion       1.3.6.1.4.1.2.6.223.7.3        Version of the software loaded on the PDU
# IBM-PDU-MIB::ibmPduModelNumber	   1.3.6.1.4.1.2.6.223.7.5	  STRING: 00WC557
# IBM-PDU-MIB::ibmPduName		   1.3.6.1.4.1.2.6.223.7.7  	  STRING: iPDU
# IBM-PDU-MIB::ibmPduManufacturer	   1.3.6.1.4.1.2.6.223.7.8	  STRING: lenovo
# IBM-PDU-MIB::ibmPduSerialNumber          1.3.6.1.4.1.2.6.223.7.9	  STRING: 97A1XX
# IBM-PDU-MIB::ibmPduPhaseCount		   1.3.6.1.4.1.2.6.223.8.3.1      1=single phase input power, 3=three phase input power
# IBM-PDU-MIB::ibmPduPhaseLastPowerReading 1.3.6.1.4.1.2.6.223.8.3.2.1.4  The value of the most recent power reading for this phase, in Watts.  There are typically multiple load segments, so snmpwalk the entire sub-tree
# IBM-PDU-MIB::ibmPduOutletCurrent         1.3.6.1.4.1.2.6.223.8.2.2.1.9  value of the Current of the given outlet returned in Milliamps  (milliamps  used instead of amps  to use integers instead of floating point)
# IBM-PDU-MIB::ibmPduOutletVoltage         1.3.6.1.4.1.2.6.223.8.2.2.1.8  value of the Voltage of the given outlet returned in Millivolts (millivolts used instead of volts to use integers instead of floating point)
# 
 










use strict;				#enforce good coding practices
use Getopt::Long;                       #allow --long-switches to be used as parameters.  Install with: perl -MCPAN -e 'install Getopt::Long'



# declare variables
my ($OK,$WARN,$CRITICAL,$UNKNOWN);
my ($CHECK_NAME,$cmd,$snmpwalk,$snmpget);
my ($host,$oid,$key,%pdu,$community);
my ($opt_h,$opt_v,$opt_C,$opt_H);
my ($verbose,$output_details,$perf_data);
$cmd = "";                                              #initialize variable
$CHECK_NAME                 = "PDU";			#name of nagios check
$verbose                    = "no";                    	#yes/no variable to increase output for debugging
$community                  = "public";  		#default SNMP community name
$output_details             = "";			#initialize variable to hold details of script output
$snmpwalk                   = "/usr/bin/snmpwalk";	#location of binary
$snmpget                    = "/usr/bin/snmpget";	#location of binary
#
# Nagios return codes
#
$OK=            0;
$WARN=          1;
$CRITICAL=      2;
$UNKNOWN=       3;




sub get_options {
   #
   # this gets the command line parameters provided by the users
   #
   print "running get_options subroutine \n" if ($verbose eq "yes");
   #
   Getopt::Long::Configure('bundling');
   GetOptions(
      "h"   => \$opt_h, "help"        => \$opt_h,
      "v"   => \$opt_v, "verbose"     => \$opt_v,
      "C=s" => \$opt_C, "community=s" => \$opt_C, "comm=s" => \$opt_C,
      "H=s" => \$opt_H, "hostname=s"  => \$opt_H, "host=s" => \$opt_H,
   );
   #
   #
   #
   # If the user supplied -h or --help, generate the help messages
   #
   if( defined( $opt_h ) ) {
      print "Nagios plugin for determining APC PDU power consumption. \n";
      print "Examples: \n";
      print "   $0 --host=myhost --community=public \n";
      print "   $0     -H myhost          -C public \n";
      print "\n\n";
      exit $UNKNOWN;
   }
   #
   # If the user supplied -v or --verbose, increase verbosity for debugging
   if( defined( $opt_v ) ) {
      $verbose = "yes";
   } 
   #
   #
   # If the user did not supply a --community SNMP community string, use "public"
   #
   if( defined( $opt_C ) ) {
      $community = $opt_C;
   } else {
      $community = "public";
   }
   #
   # If the user did not supply a --host=??? , generate a warning
   #
   if( defined( $opt_H ) ) {
      $host = $opt_H;
   } else {
      print "$CHECK_NAME UNKNOWN - a remote host to check was not provided. Use this syntax: $0 -H hostname -C snmp_community\n";
      exit $CRITICAL;                                           #exit script
   }
   #
   print "host=$host community=$community \n" if ($verbose eq "yes");
}                       #end of subroutine





sub sanity_checks {
   #
   #
   print "running sanity_checks subroutine \n" if ($verbose eq "yes");
   #
   #
   if ( ! -f "$snmpwalk" ) {
      print "ERROR: Cannot find $snmpwalk \n";
      exit;
   }
   if ( ! -x "$snmpwalk" ) {
      print "ERROR: $snmpwalk is not executable by the current user\n";
      exit;
   }
   if ( ! -f "$snmpget" ) {
      print "ERROR: Cannot find $snmpget \n";
      exit;
   }
   if ( ! -x "$snmpget" ) {
      print "ERROR: $snmpget is not executable by the current user\n";
      exit;
   }
}                                                       #end of subroutine



sub check_pdu {
   #
   # This uses the IBM-PDU-MIB
   #
   print "running check_pdu subroutine \n" if ($verbose eq "yes");
   #
   $oid = "1.3.6.1.4.1.2.6.223.0.1.1.7.0";                             
   $cmd = "$snmpget -Onq -v 1 -c $community $host $oid";
   print "   Checking for ibmPduVoltageWarning with: $cmd \n" if ($verbose eq "yes");
   $pdu{ibmPduVoltageWarning} = "unknown";					#initialize variable
   open(IN,"$cmd |");                                                   	#get the index numbers of the LUNs
   while (<IN>) {                                                       	#read a line from the command output
      s/\"//g;                                                          	#get rid of quotation marks
      if ( /$oid ([0-9]+)/ ) {         						#value returned will be 0=voltageNormal, 1=voltageOutOfRange
         $pdu{ibmPduVoltageWarning} = $1;   	         			#assign value to hash
         if ( $pdu{ibmPduVoltageWarning} == 0 ) { $pdu{ibmPduVoltageWarning} = "voltageNormal" }	#change integer to human readable value
         if ( $pdu{ibmPduVoltageWarning} == 1 ) { $pdu{ibmPduVoltageWarning} = "voltageOutOfRangel" }	#change integer to human readable value
         print "   Voltage check: $pdu{ibmPduVoltageWarning} \n" if ($verbose eq "yes");
      }
   }                                                                    	#end of while loop
   close IN;									#close filehandle
   #
   $oid = "1.3.6.1.4.1.2.6.223.0.1.1.6.0";                             
   $cmd = "$snmpget -Onq -v 1 -c $community $host $oid";
   print "   Checking for ibmPduState with: $cmd \n" if ($verbose eq "yes");
   $pdu{ibmPduState} = "unknown";						#initialize variable
   open(IN,"$cmd |");  								#get the index numbers of the LUNs
   while (<IN>) {      								#read a line from the command output
      s/\"//g;                   	                                       	#get rid of quotation marks
      if ( /$oid ([0-9]+)/ ) {         						#value returned will be 0=powerOff, 1=powerOn, 2=reboot, 3=delayedOn, 4=delayedOff
         $pdu{ibmPduState} = $1;   	         				#assign value to hash
         if ( $pdu{ibmPduState} == 0 ) { $pdu{ibmPduState} = "powerOff"   }	#change integer to human readable value
         if ( $pdu{ibmPduState} == 1 ) { $pdu{ibmPduState} = "powerOn"    }	#change integer to human readable value
         if ( $pdu{ibmPduState} == 2 ) { $pdu{ibmPduState} = "reboot"     }	#change integer to human readable value
         if ( $pdu{ibmPduState} == 3 ) { $pdu{ibmPduState} = "delayedOn"  }	#change integer to human readable value
         if ( $pdu{ibmPduState} == 4 ) { $pdu{ibmPduState} = "delayedOff" }	#change integer to human readable value
         print "   PDU operational state: $pdu{ibmPduState} \n" if ($verbose eq "yes");
      }										#end of if block
   }                                                                    	#end of while loop
   close IN;									#close filehandle
   #
   $oid = "1.3.6.1.4.1.2.6.223.9.2.1.8.1.0";                             
   $cmd = "$snmpget -Onq -v 1 -c $community $host $oid";
   print "   Checking for external temperature sensor ibmPduExtThermalLastReading with: $cmd \n" if ($verbose eq "yes");
   $pdu{ibmPduExtThermalLastReading} = "unknown";				#initialize variable
   open(IN,"$cmd |");  								#get the index numbers of the LUNs
   while (<IN>) {      								#read a line from the command output
      s/\"//g;                   	                                       	#get rid of quotation marks
      if ( /$oid ([0-9]+)/ ) {         						#value returned will be 0=powerOff, 1=powerOn, 2=reboot, 3=delayedOn, 4=delayedOff
         $pdu{ibmPduExtThermalLastReading} = $1;       				#assign value to hash
         print "   External temperature sensor: $pdu{ibmPduExtThermalLastReading}C \n" if ($verbose eq "yes");
      }										#end of if block
   }                                                                    	#end of while loop
   close IN;									#close filehandle
   #
   $oid = "1.3.6.1.4.1.2.6.223.9.2.1.9.1.0";                             
   $cmd = "$snmpget -Onq -v 1 -c $community $host $oid";
   print "   Checking for external humidity sensor ibmPduExtHumidityLastReading with: $cmd \n" if ($verbose eq "yes");
   $pdu{ibmPduExtHumidityLastReading} = "unknown";				#initialize variable
   open(IN,"$cmd |");  								#get the index numbers of the LUNs
   while (<IN>) {      								#read a line from the command output
      s/\"//g;                   	                                       	#get rid of quotation marks
      if ( /$oid ([0-9]+)/ ) {         						#value returned will be 0=powerOff, 1=powerOn, 2=reboot, 3=delayedOn, 4=delayedOff
         $pdu{ibmPduExtHumidityLastReading} = $1;      				#assign value to hash
         print "   External humidity sensor: $pdu{ibmPduExtHumidityLastReading}\% \n" if ($verbose eq "yes");
      }										#end of if block
   }                                                                    	#end of while loop
   close IN;									#close filehandle
   #
   $oid = "1.3.6.1.4.1.2.6.223.7.3.0";                             
   $cmd = "$snmpget -Onq -v 1 -c $community $host $oid";
   print "   Checking firmware ibmPduSoftwareVersion with: $cmd \n" if ($verbose eq "yes");
   $pdu{ibmPduSoftwareVersion} = "unknown";					#initialize variable
   open(IN,"$cmd |");  								#get the index numbers of the LUNs
   while (<IN>) {      								#read a line from the command output
      s/\"//g;                   	                                       	#get rid of quotation marks
      if ( /$oid ([a-zA-Z0-9_\.]+)/ ) {  					#value returned will be 0=powerOff, 1=powerOn, 2=reboot, 3=delayedOn, 4=delayedOff
         $pdu{ibmPduSoftwareVersion} = $1;       				#assign value to hash
         print "   Firmware: $pdu{ibmPduSoftwareVersion} \n" if ($verbose eq "yes");
      }										#end of if block
   }                                                                    	#end of while loop
   close IN;									#close filehandle
   #
   $oid = "1.3.6.1.4.1.2.6.223.7.5.0";                             
   $cmd = "$snmpget -Onq -v 1 -c $community $host $oid";
   print "   Checking model number ibmPduModelNumber with: $cmd \n" if ($verbose eq "yes");
   $pdu{ibmPduModelNumber} = "unknown";						#initialize variable
   open(IN,"$cmd |");  								#get the index numbers of the LUNs
   while (<IN>) {      								#read a line from the command output
      s/\"//g;                   	                                       	#get rid of quotation marks
      if ( /$oid ([a-zA-Z0-9]+)/ ) {   						#value returned will be device model number
         $pdu{ibmPduModelNumber} = $1;   	    				#assign value to hash
         print "   ModelNumber: $pdu{ibmPduModelNumber} \n" if ($verbose eq "yes");
      }										#end of if block
   }                                                                    	#end of while loop
   close IN;									#close filehandle
   #
   $oid = "1.3.6.1.4.1.2.6.223.7.9.0";                             
   $cmd = "$snmpget -Onq -v 1 -c $community $host $oid";
   print "   Checking serial number ibmPduSerialNumber with: $cmd \n" if ($verbose eq "yes");
   $pdu{ibmPduSerialNumber} = "unknown";					#initialize variable
   open(IN,"$cmd |");  								#get the index numbers of the LUNs
   while (<IN>) {      								#read a line from the command output
      s/\"//g;                   	                                       	#get rid of quotation marks
      if ( /$oid ([a-zA-Z0-9]+)/ ) {  						#value returned will be device serial number
         $pdu{ibmPduSerialNumber} = $1;       					#assign value to hash
         print "   SerialNumber: $pdu{ibmPduSerialNumber} \n" if ($verbose eq "yes");
      }										#end of if block
   }                                                                    	#end of while loop
   close IN;									#close filehandle
   #
   $oid = "1.3.6.1.4.1.2.6.223.7.8.0";                             
   $cmd = "$snmpget -Onq -v 1 -c $community $host $oid";
   print "   Checking manufacturer ibmPduManufacturer with: $cmd \n" if ($verbose eq "yes");
   $pdu{ibmPduManufacturer} = "unknown";					#initialize variable
   open(IN,"$cmd |");  								#get the index numbers of the LUNs
   while (<IN>) {      								#read a line from the command output
      s/\"//g;                   	                                      	#get rid of quotation marks
      if ( /$oid ([a-zA-Z0-9]+)/ ) {   						#value returned will be 0=powerOff, 1=powerOn, 2=reboot, 3=delayedOn, 4=delayedOff
         $pdu{ibmPduManufacturer} = $1;		       				#assign value to hash
         print "   Manufacturer: $pdu{ibmPduManufacturer} \n" if ($verbose eq "yes");
      }										#end of if block
   }                                                                    	#end of while loop
   close IN;									#close filehandle
}										#end of subroutine 



sub calculate_power_usage {
   #
   #
   print "running calculate_power_usage subroutine \n" if ($verbose eq "yes");
   #
   # Capture the used amperage on each outlet (keep cumulative total for total amperage used by entire PDU)
   #
   $oid = "1.3.6.1.4.1.2.6.223.8.2.2.1.9";                             
   $cmd = "$snmpwalk -Onq -v 1 -c $community $host $oid";
   print "   Checking amperage usage on each outlet with: $cmd \n" if ($verbose eq "yes");
   $pdu{ibmPduOutletCurrent} = 0;						#initialize variable
   open(IN,"$cmd |");  								#get the index numbers of the LUNs
   while (<IN>) {      								#read a line from the command output
      s/\"//g;                   	                                      	#get rid of quotation marks
      if ( /$oid[0-9\.]+ ([0-9]+)/ ) {  					#multiple values returned will be wattage consumed on each load segment
         $pdu{ibmPduOutletCurrent} =  $pdu{ibmPduOutletCurrent} + $1;	#running total of all the load segments
         print "   Cumulative amperage used: $pdu{ibmPduOutletCurrent} milliamps \n" if ($verbose eq "yes");
      }										#end of if block
   }                                                                    	#end of while loop
   close IN;									#close filehandle
   #
   # Capture the output voltage on each outlet (unlike amperage, this should be the same for every outlet, and is not a cumulative value)
   #
   $oid = "1.3.6.1.4.1.2.6.223.8.2.2.1.8";                             
   $cmd = "$snmpwalk -Onq -v 1 -c $community $host $oid";
   print "   Checking output voltage on each outlet with: $cmd \n" if ($verbose eq "yes");
   $pdu{ibmPduOutletVoltage} = 0;						#initialize variable
   open(IN,"$cmd |");  								#get the index numbers of the LUNs
   while (<IN>) {      								#read a line from the command output
      s/\"//g;                   	                                      	#get rid of quotation marks
      if ( /$oid[0-9\.]+ ([0-9]+)/ ) {  					#multiple values returned will be wattage consumed on each load segment
         $pdu{ibmPduOutletVoltage} =  $1;					#just capture the last value, should be the same for all outlets
         print "   Output voltage on each outlet:$pdu{ibmPduOutletVoltage} millivolts \n" if ($verbose eq "yes");
      }										#end of if block
   }                                                                    	#end of while loop
   close IN;									#close filehandle
   #
   # Now that we know volts and amps, we can calculate watts with this formula:  watts = amps x volts        amps = watts / volts
   #
   $pdu{volts} = $pdu{ibmPduOutletVoltage} / 1000;				#convert millivolts to volts
   $pdu{volts} = sprintf("%.1f",$pdu{volts});					#truncate to 1 decimal place
   #
   $pdu{amps} = $pdu{ibmPduOutletCurrent} / 1000;				#convert millivolts to volts
   $pdu{amps} = sprintf("%.1f",$pdu{amps});					#truncate to 1 decimal place
   #
   $pdu{watts} = $pdu{amps} * $pdu{volts};					#calculate watts
   $pdu{watts} = sprintf("%.1f",$pdu{watts});					#truncate to 1 decimal place
   print "   volts:$pdu{volts} watts:$pdu{watts} amps:$pdu{amps} \n" if ($verbose eq "yes");
}										#end of subroutine 




sub print_output {
   #
   # print output in the format expected by nagios
   #
   print "running print_output subroutine \n" if ($verbose eq "yes");
   #
   # The nagios performance data will be the same for all the outputs, so just put it in a variable that can be use by all the output options
   #
   # The format is:  label=value[UOM];[warn];[crit];[min];[max]
   # On the "label=value" section is required.  The warn|crit|min|max entries are optional.
   # You can have multiple items of perf data, just separate each section with a space
   # UOM is Units Of Measurement.    Can be s=seconds B=bytes MB=megabytes %=percent c=counter
   # You can use the standard nagios ranges and thresholds formats (examples below)
   # Range definition	Generate an alert if x...
   # ----------------   -------------------------
   # 10	                < 0 or > 10, (outside the range of {0 .. 10})
   # 10:	        < 10, (outside {10 .. âˆž})
   # ~:10	        > 10, (outside the range of {-âˆž .. 10})
   # 10:20	        < 10 or > 20, (outside the range of {10 .. 20})
   # @10:20	        â‰¥ 10 and â‰¤ 20, (inside the range of {10 .. 20})
   #
   $perf_data = "watts=$pdu{watts};;;; amps=$pdu{amps};;;; temperature_C=$pdu{ibmPduExtThermalLastReading};;;; humidity_pct=$pdu{ibmPduExtHumidityLastReading};;;;";
   #
   #
   # Much of the text of the output will be the same.  Put the common stuff in a variable so we can simplify the outputs
   #
   $output_details = "watts:$pdu{watts} amps:$pdu{amps} temperature:$pdu{ibmPduExtThermalLastReading}C humidity:$pdu{ibmPduExtHumidityLastReading}\% voltage_state:$pdu{ibmPduVoltageWarning} pdu_state:$pdu{ibmPduState} manufacturer:$pdu{ibmPduManufacturer} model:$pdu{ibmPduModelNumber} serial:$pdu{ibmPduSerialNumber} firmware:$pdu{ibmPduSoftwareVersion} ";
   #
   #
   if (  $pdu{ibmPduVoltageWarning} ne "voltageNormal" ) {
      print "$CHECK_NAME WARN - voltage health check is $pdu{ibmPduVoltageWarning}.  Please investigate.  $output_details | $perf_data \n";
      exit $WARN; 
   }
   #
   #
   # This message gets sent if everything is ok
   print "$CHECK_NAME OK - $output_details | $perf_data \n";
   exit $OK;
   #
   # The script should never get this far
   print "$CHECK_NAME UNKNOWN - Could not determine PDU status.  Please investigate. $output_details | $perf_data \n";
   exit $UNKNOWN;
}                                                                       #end of subroutine





# --------------------------- main body of program ----------------------
get_options;
sanity_checks;
check_pdu;
calculate_power_usage;
print_output;

